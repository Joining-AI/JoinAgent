# 这段代码是微软公司的一个版权声明，它使用了MIT许可证
# Copyright (c) 2024 Microsoft Corporation.
# Licensed under the MIT License

# 这里定义了一个字符串，它描述了一个任务，关于从文本中识别实体关系
ENTITY_RELATIONSHIPS_GENERATION_PROMPT = """
-目标-
给定一个可能与活动相关的文本文档和一个实体类型列表，从文本中找出所有这些类型的实体以及它们之间的关系。

-步骤-
1. 找出所有实体。对于每个找到的实体，提取以下信息：
- 实体名称：大写的实体名
- 实体类型：以下类型之一：[{entity_types}]
- 实体描述：实体属性和活动的详细描述
格式化每个实体，开头和结尾加上括号，如 ("entity"{{tuple_delimiter}}"<实体名>{{tuple_delimiter}}"<实体类型>{{tuple_delimiter}}"<实体描述>")
例如：("entity"{{tuple_delimiter}}"微软"{{tuple_delimiter}}"组织"{{tuple_delimiter}}"微软是一家科技公司")

2. 从步骤1中找出的所有实体中，找出所有明显相关的（源实体，目标实体）对。
对于每一对相关实体，提取以下信息：
- 源实体：步骤1中识别出的源实体名称
- 目标实体：步骤1中识别出的目标实体名称
- 关系描述：为什么认为源实体和目标实体之间有关系的解释
- 关系强度：1到10之间的整数，表示源实体和目标实体之间关系的强度
格式化每个关系，开头和结尾加上括号，如 ("relationship"{{tuple_delimiter}}"<源实体>{{tuple_delimiter}}"<目标实体>{{tuple_delimiter}}"<关系描述>{{tuple_delimiter}}<关系强度>)
例如：("relationship"{{tuple_delimiter}}"公司A"{{tuple_delimiter}}"人A"{{tuple_delimiter}}"公司A目前由人A拥有"{{tuple_delimiter}}8)

3. 以{language}语言的形式返回步骤1和2中识别的所有实体和关系的单一列表。使用**{{record_delimiter}}**作为列表分隔符。如果需要翻译，只翻译描述，其他不要动！

4. 完成后，输出{{completion_delimiter}}。

-真实数据-
######################
实体类型: {entity_types}
文本: {input_text}
######################
输出:
"""

# 这个字符串与上面类似，但格式化输出为JSON格式
ENTITY_RELATIONSHIPS_GENERATION_JSON_PROMPT = """
-目标-
给定一个可能与活动相关的文本文档和一个实体类型列表，从文本中找出所有这些类型的实体以及它们之间的关系。

-步骤-
1. 找出所有实体。对于每个找到的实体，提取以下信息：
- 实体名称：大写的实体名
- 实体类型：以下类型之一：[{entity_types}]
- 实体描述：实体属性和活动的详细描述

将每个实体输出为一个JSON条目，格式如下：

{{"name": <实体名>, "type": <类型>, "description": <实体描述>}}

2. 从步骤1中找出的所有实体中，找出所有明显相关的（源实体，目标实体）对。
对于每一对相关实体，提取以下信息：
- 源实体：步骤1中识别出的源实体名称
- 目标实体：步骤1中识别出的目标实体名称
- 关系描述：为什么认为源实体和目标实体之间有关系的解释
- 关系强度：1到10之间的整数，表示源实体和目标实体之间关系的强度

将每个关系格式化为一个JSON条目，如下所示：

{{"source": <源实体>, "target": <目标实体>, "relationship": <关系描述>, "relationship_strength": <关系强度>}}

3. 以{language}语言的形式返回步骤1和2中识别的所有JSON实体和关系的单一列表。如果需要翻译，只翻译描述，其他不要动！

-真实数据-
######################
实体类型: {entity_types}
文本: {input_text}
######################
输出:
"""

# 这个字符串定义了一个任务，从文本中找出所有实体并报告它们之间的关系，但不指定实体类型
UNTYPED_ENTITY_RELATIONSHIPS_GENERATION_PROMPT = """
-目标-
给定一个可能与活动相关的文本文档，首先从文本中找出所有需要的实体，以便捕捉文本中的信息和想法。
然后报告所有识别出的实体之间的关系。

-步骤-
1. 找出所有实体。对于每个找到的实体，提取以下信息：
- 实体名称：大写的实体名
- 实体类型：为实体提出几个标签或类别。类别不应太具体，应尽可能通用。
- 实体描述：实体属性和活动的详细描述
格式化每个实体为 ("entity"{{tuple_delimiter}}"<实体名>{{tuple_delimiter}}"<实体类型>{{tuple_delimiter}}"<实体描述>)

2. 从步骤1中找出的所有实体中，找出所有明显相关的（源实体，目标实体）对。
对于每一对相关实体，提取以下信息：
- 源实体：步骤1中识别出的源实体名称
- 目标实体：步骤1中识别出的目标实体名称
- 关系描述：为什么认为源实体和目标实体之间有关系的解释
- 关系强度：表示源实体和目标实体之间关系强度的数字分数
格式化每个关系为 ("relationship"{{tuple_delimiter}}"<源实体>{{tuple_delimiter}}"<目标实体>{{tuple_delimiter}}"<关系描述>{{tuple_delimiter}}<关系强度>)

3. 以{language}语言的形式返回步骤1和2中识别的所有实体和关系的单一列表。使用**{{record_delimiter}}**作为列表分隔符。如果需要翻译，只翻译描述，其他不要动！

4. 完成后，输出{{completion_delimiter}}

######################
-示例-
######################
文本：
...
输出：
...

######################
文本：
...
输出：
...
"""

# 这里没有实际执行的代码，只是定义了三个字符串，它们描述了一个处理文本中实体关系的任务

